// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: monitor_info.proto

#include "monitor_info.pb.h"
#include "monitor_info.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace linux_Monitor {

static const char* GrpcManager_method_names[] = {
  "/linux_Monitor.GrpcManager/SetMonitorInfo",
  "/linux_Monitor.GrpcManager/GetMonitorInfo",
  "/linux_Monitor.GrpcManager/HealthCheck",
};

std::unique_ptr< GrpcManager::Stub> GrpcManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcManager::Stub> stub(new GrpcManager::Stub(channel));
  return stub;
}

GrpcManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetMonitorInfo_(GrpcManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMonitorInfo_(GrpcManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HealthCheck_(GrpcManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpcManager::Stub::SetMonitorInfo(::grpc::ClientContext* context, const ::linux_Monitor::MonitorInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMonitorInfo_, context, request, response);
}

void GrpcManager::Stub::experimental_async::SetMonitorInfo(::grpc::ClientContext* context, const ::linux_Monitor::MonitorInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMonitorInfo_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::SetMonitorInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMonitorInfo_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::SetMonitorInfo(::grpc::ClientContext* context, const ::linux_Monitor::MonitorInfo* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMonitorInfo_, context, request, response, reactor);
}

void GrpcManager::Stub::experimental_async::SetMonitorInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMonitorInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcManager::Stub::AsyncSetMonitorInfoRaw(::grpc::ClientContext* context, const ::linux_Monitor::MonitorInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetMonitorInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcManager::Stub::PrepareAsyncSetMonitorInfoRaw(::grpc::ClientContext* context, const ::linux_Monitor::MonitorInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetMonitorInfo_, context, request, false);
}

::grpc::Status GrpcManager::Stub::GetMonitorInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::linux_Monitor::MonitorInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMonitorInfo_, context, request, response);
}

void GrpcManager::Stub::experimental_async::GetMonitorInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::linux_Monitor::MonitorInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMonitorInfo_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::GetMonitorInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::linux_Monitor::MonitorInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMonitorInfo_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::GetMonitorInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::linux_Monitor::MonitorInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMonitorInfo_, context, request, response, reactor);
}

void GrpcManager::Stub::experimental_async::GetMonitorInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::linux_Monitor::MonitorInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMonitorInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::linux_Monitor::MonitorInfo>* GrpcManager::Stub::AsyncGetMonitorInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::linux_Monitor::MonitorInfo>::Create(channel_.get(), cq, rpcmethod_GetMonitorInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::linux_Monitor::MonitorInfo>* GrpcManager::Stub::PrepareAsyncGetMonitorInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::linux_Monitor::MonitorInfo>::Create(channel_.get(), cq, rpcmethod_GetMonitorInfo_, context, request, false);
}

::grpc::Status GrpcManager::Stub::HealthCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

void GrpcManager::Stub::experimental_async::HealthCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, std::move(f));
}

void GrpcManager::Stub::experimental_async::HealthCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

void GrpcManager::Stub::experimental_async::HealthCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcManager::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_HealthCheck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GrpcManager::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_HealthCheck_, context, request, false);
}

GrpcManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcManager::Service, ::linux_Monitor::MonitorInfo, ::google::protobuf::Empty>(
          [](GrpcManager::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::linux_Monitor::MonitorInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SetMonitorInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcManager::Service, ::google::protobuf::Empty, ::linux_Monitor::MonitorInfo>(
          [](GrpcManager::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::linux_Monitor::MonitorInfo* resp) {
               return service->GetMonitorInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcManager::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          [](GrpcManager::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->HealthCheck(ctx, req, resp);
             }, this)));
}

GrpcManager::Service::~Service() {
}

::grpc::Status GrpcManager::Service::SetMonitorInfo(::grpc::ServerContext* context, const ::linux_Monitor::MonitorInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcManager::Service::GetMonitorInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::linux_Monitor::MonitorInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcManager::Service::HealthCheck(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace linux_Monitor

